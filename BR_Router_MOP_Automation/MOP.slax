version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns adv = "http://xml.juniper.net/adventure";
ns func extension = "http://exslt.org/functions";
ns test = "http://xml.juniper.net/test";

import "../import/junos.xsl";



match / {

	expr jcs:output("\n\nHello! Welcome to Automated MOP \n");
	expr jcs:output("\n\nChecking for whether the router is connected to VOIP equipment .\n ");
	expr test:Continue_Prompt_Function();


	expr jcs:output("===========> Running show aps");

/********************************************** show aps *********************************************************************************/

	var $show_aps		= <command> "show aps";
	var $o_show_aps		= jcs:invoke($show_aps);

	if( ($o_show_aps) && not(($o_show_aps//self::xnm:warning)||($o_show_aps//self::xnm:error)))
	{
		expr jcs:output("VOIP data present .Please contact the VNOC at v966-6700 (800-229-7427)	");
		expr test:Continue_Prompt_Function();
	}


	expr jcs:output("===========> show bgp summary| match 1661");

/********************************************** show bgp summary| match 1661 *************************************************************/

	var $show_bgp 		= <command> "show bgp summary";
	var $o_show_bgp 	= jcs:invoke($show_bgp);
	
	if($o_show_bgp/bgp-peer[peer-as==1661])
	{
		
			expr jcs:output("VOIP data present .Please contact the VNOC at v966-6700 (800-229-7427)	");
			expr test:Continue_Prompt_Function();			
		
			
	}
 
	expr jcs:output("===========> show bfd session | match ^152");

/********************************************** show bfd session | match ^152 ************************************************************/

	var $show_bfd 		= <command> "show bfd session";
	var $o_show_bfd		= jcs:invoke($show_bfd);
	
	if($o_show_bfd/bfd-session[starts-with(session-neighbor,152)])
	{
			expr jcs:output("VOIP data present .Please contact the VNOC at v966-6700 (800-229-7427)	");
			expr test:Continue_Prompt_Function();	
		
	}
	
	
	
	expr jcs:output("===========> show vrrp");

/********************************************** show vrrp ********************************************************************************/

	var $show_vrrp 		= <command> "show vrrp";
	var $o_show_vrrp 	= jcs:invoke($show_vrrp);
	
	if( ($o_show_vrrp) && not(($o_show_vrrp//self::xnm:warning)||($o_show_vrrp//self::xnm:error)) ) 
	{
		expr jcs:output("VOIP data present .Please contact the VNOC at v966-6700 (800-229-7427)");
		expr test:Continue_Prompt_Function();
	}

	expr test:Continue_Prompt_Function();

	expr jcs:output("===========> show l2circuit connections");

/********************************************** show l2circuit connections ***************************************************************/

	var $show_l2connect 	= <command> "show l2circuit connections";
	var $o_show_l2connect 	= jcs:invoke($show_l2connect);
	 
	if( ($o_show_l2connect) && not(($o_show_l2connect//self::xnm:warning)||($o_show_l2connect//self::xnm:error)) ) 
	{
		expr jcs:output("Look like it is XT1.SAC1 or XT2.HOU7 router ? ");
		expr test:Continue_Prompt_Function();
	}

	expr jcs:output("===========> show mpls lsp | match sig");

/********************************************** show mpls lsp | match sig ****************************************************************/

	var $show_mpls_lsp	= <command> "show mpls lsp";
	var $o_show_mpls_lsp	= jcs:invoke($show_mpls_lsp);
	
	if($o_show_mpls_lsp/rsvp-session-data[session-type=="Ingress"]/rsvp-session/mpls-lsp[contains(name,"SIG")])
	{
			expr jcs:output("Look like it is XT1.SAC1 or XT2.HOU7 router ");
			expr test:Continue_Prompt_Function();
	}
	
	if($o_show_mpls_lsp/rsvp-session-data[session-type=="Egress"]/rsvp-session[contains(name,"SIG")])
	{
			expr jcs:output("Looks like it is XT1.SAC1 or XT2.HOU7 router ");
			expr test:Continue_Prompt_Function();
	}

	
	
/********************************************** XR routers show adjacency ****************************************************************/
/********************************************** show isis adjacency | match XR ***********************************************************/
/********************************************** show bgp summary | match 705 *************************************************************/



	var $show_isis_adjacency 	= <command> "show isis adjacency";
	var $o_show_isis_adjacency	= jcs:invoke($show_isis_adjacency);
	
	if($o_show_isis_adjacency/isis-adjacency[contains(interface-name,"XR")])
	{
		expr jcs:output(" Looks like XR router is directly connected. ");
		expr jcs:output("Before going further please check on opposite plane XR devices to make sure the ISIS adjacencies to the upstream XT/XL are up");
		expr test:Continue_Prompt_Function();
	
		if(not($o_show_bgp/bgp-peer[peer-as==705]))
		{
		
			expr jcs:output(" The BGP sessions to AS 705 is not present .Please resolve the issue before continuing ");
			expr test:Continue_Prompt_Function();		
		
			
		}
		else
		{
			
			expr jcs:output("Please check on for any eBGP sessions with AS 705 on other plane. The same BGP sessions should exist on both planes. ");
			expr test:Continue_Prompt_Function();
		}

	}

	var $connection = jcs:open();
	expr jcs:output("===========> Deactivating External BGP Neighbors");
/********************************************** Deactivating External BGP Neighbors ******************************************************/

 	var $Bgp_Config=<get-configuration>;
	var $O_Bgp_Config = jcs:invoke($Bgp_Config);

	
	
	for-each($O_Bgp_Config/protocols/bgp/group[not(starts-with(peer-as,"64")||starts-with(peer-as,"65")||starts-with(peer-as,"61")||starts-with(peer-as,"62"))])
	{
		var $bgp_group_de-activate_configuration={
						<configuration> {
							<protocols>{
								<bgp>	{
								<group inactive="inactive">
											{
							 				<name> name;
											}
									}
				 		   		    }
		    						}
					  		}
		call jcs:load-configuration( $connection, $configuration = $bgp_group_de-activate_configuration);
		
	}

	expr jcs:output("===========> show isis database | match overload | match “XT|XL|BB|TL");

/**************************************show isis database | match overload | match “XT|XL|BB|TL*******************************************/

	var $Show_Version	=	<command> "show version";
	var $O_Show_Version	=	jcs:invoke($Show_Version);
	var $O_Router_name	=	$O_Show_Version/host-name;

	
	var $POP_String		=	jcs:split("\\.",$O_Router_name);
	var $Act_POP		=	substring($POP_String[2],1,3);
	
	expr jcs:output($Act_POP);
	
		
	var $isis_database=<command> "show isis database ";
	var $O_isis_database = jcs:invoke($isis_database);
	

	var $isis_iter=($O_isis_database/rpc-reply/isis-database-information/isis-database[level==2]/isis-database-entry[ contains(lsp-attributes,"Overload")&&( starts-with(lsp-id,"XL")|| starts-with(lsp-id,"XT")|| starts-with(lsp-id,"BB")|| starts-with(lsp-id,"TL") )]);

	if($isis_iter)
	{
		
			for-each($isis_iter)
			{
				
				var $LOOP_POP	=jcs:split("\\.",lsp-id);
				var $A_LOOP_POP	=substring($LOOP_POP[2],1,3);
				if($A_LOOP_POP==$Act_POP)
				{
					expr jcs:output("Overload router" _ lsp-id _ " is in the same POP");
					expr test:Continue_Prompt_Function();
				}
			}
		
	}
	



	expr jcs:output("===========> set protocols isis overload");

/********************************************** set protocols isis overload **************************************************************/
	var $isis_configuration={
		<configuration> {
			<protocols> {
				<isis> {
					<overload>;
					}
				    }
				}
		    }
	

	var $isis_time_configuration={
		<configuration> {
			<protocols> {
				<isis> {
					<overload>{
							<timeout delete="delete">;
						}
					}
				    }
				}
		    }
			
	call jcs:load-configuration( $connection, $configuration =$isis_time_configuration);	
	call jcs:load-configuration( $connection, $configuration =$isis_configuration);

	expr jcs:output("===========> deactivate bgp protocols");
	
/********************************************** deactivate bgp protocols *****************************************************************/

	var $bgp_de-activate_configuration={
				<configuration> {
					<protocols>{
						<bgp inactive="inactive"> ;
				 		   }
		    				}
					  }
	

		
	call jcs:load-configuration( $connection, $configuration =$bgp_de-activate_configuration);


	expr jcs:output("===========> deactivate protocols");

/********************************************** deactivate protocols *********************************************************************/

	
	var $protocols_deactivate_configuration={
		<configuration> {
			<protocols inactive="inactive"> ;
		    }
		}
	

		
	call jcs:load-configuration( $connection, $configuration =$protocols_deactivate_configuration);

	expr jcs:output("===========> activate protocols");

/********************************************** activate protocols ***********************************************************************/
	
	var $protocols_activate_configuration={
				<configuration> {
					<protocols active="active">;
		    				}
					  }

	call jcs:load-configuration( $connection, $configuration =$protocols_activate_configuration);
	
	expr jcs:output("===========> activate bgp");

/********************************************** activate bgp *****************************************************************************/

	var $bgp_activate_configuration={
				<configuration> {
					<protocols >{
							<bgp active="active">;
							}
		    				}
					  }
	

		
	call jcs:load-configuration( $connection, $configuration =$bgp_activate_configuration);

	expr jcs:output("===========> delete protocols isis overload");

/********************************************** delete protocols isis overload ***********************************************************/

		
	var $isis_delete_configuration={
		<configuration> {
			<protocols> {
				<isis delete="delete"> {
					<overload delete="delete">;
					}
				    }
				}
		    }
	call jcs:load-configuration( $connection, $configuration =$isis_delete_configuration);

	expr jcs:output("===========> set protocols isis overload timeout 600");

/********************************************** set protocols isis overload timeout 600  *************************************************/

	var $isis_time_reset_configuration={
		<configuration> {
			<protocols> {
				<isis> {
					<overload>{
							<timeout> 600;
						}
					}
				    }
				}
		    }

	call jcs:load-configuration( $connection, $configuration =$isis_time_reset_configuration);


	expr jcs:output("===========> activate group <GROUP_NAME>");

/********************************************** activate group <GROUP_NAME>  *************************************************/

	var $Restore_Bgp_Config=<get-configuration>;
	var $O_Restore_Bgp_Config = jcs:invoke($Restore_Bgp_Config);
	
for-each($O_Restore_Bgp_Config/protocols/bgp/group[not(starts-with(peer-as,"64")||starts-with(peer-as,"65")||starts-with(peer-as,"61")||starts-with(peer-as,"62"))])
	{
		
		var $Temp_bgp_grp=./name;	
		if(not($O_Bgp_Config/protocols/bgp/group[(@inactive)&&(name==$Temp_bgp_grp)]))
		{
			var $bgp_group_activate_configuration={
						<configuration> {
							<protocols>{
								<bgp>	{
								<group active="active">
											{
							 				<name> name;
											}
									}
				 		   		    }
		    						}
					  		}
		call jcs:load-configuration( $connection, $configuration = $bgp_group_activate_configuration);
		}




	}
	
	var $close-results = jcs:close($connection);






}
<func:function name="test:Continue_Prompt_Function">
{
	var $var = jcs:get-input( "Do you want to continue (yes/no) ? " );
	if($var=="no")     
	{ 
	  		<xsl:message terminate="yes"> "Aborting the script";
	} 
	else
	{
		if($var!="yes")
		{
		
			<xsl:message> "Please choose between 'yes' or 'no'.\n";
			expr test:Continue_Prompt_Function();
				
			
		}
	}
	
}

