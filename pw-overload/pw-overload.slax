/*
$Id$
*/

version 1.0;
ns Junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

/*
 * Author        : Nadeem Mohammad
 * Version       : 1.0
 * Last Modified : May 5th, 2014
 * Platform      : PTX, MX
 * Release       : 10.4 and above
 *
 * Description   : This event script is simulating an ospf overload functionality.
 *                 It has two parts. local part which runs on the local router
 *                 connected to PE over an l2circuit connection. When PE is about
 *                 to get into a maintenance window it brings down the ifl 
 *                 on which a BFD session is running between the local router
 *                 and the PE router. Local router detects this BFD session
 *                 going down and this acts as the TRIGGER for *this* script
 *                 running on the local router to run.
 * 
 *                 As this script runs when BFD session goes down, it looks
 *                 for rest of the IFLs on the IFD on which the BFD session
 *                 just went down. All these ifls are where OSPF session is
 *                 running between the local router (CE1) and the remote router
 *                 (CE2). After finding all these IFLs it raises the ospf metric
 *                 value on all these IFLs. it first finds the existing metric
 *                 value and adds 30000 to that.
 *
 *                 When this happens, this will trigger OSPF to select an
 *                 alternate route to reach remote CE2, via PE2.
 *
 *                 After raising the metric this script then logs in to the
 *                 remote CE router and invokes an op script responsible to
 *                 do the same thing on the remote side. i.e raise the OSPF
 *                 metric on links towards PE1 such that return traffic also
 *                 takes path towards PE2. It does this by sending OSPF 
 *                 neighbor address to the remote CE2. the script running
 *                 on the remote CE2 uses the neighbor info and finds the
 *                 corrisponding IFLs on which this ospf session is running
 *                 and increases the metric value.
 *
 *                 When maintenance window is completed and the IFL is brought
 *                 up on the PE1. this triggers a BFD UP event on the local
 *                 router CE1 where this script is running. When this happens
 *                 script restores the old metric values on all the IFLs and
 *                 logs into the remote CE2 and executes the same op script 
 *                 to restore metric values on the other side. As a result of
 *                 this old path should get restored.
 *
 *                 NOTE: The password and user-name used to log into the remote
 *                       CE2 is jnpr/pass123. change this accordingly. you may
 *                       also need to add CE1 on CE2 and CE2 on CE1 as known
 *                       hosts for successful login. use the following command:
 *
 *                       set security ssh-known-hots fetch-from-server   
 *
 * =============================================================================
 * Revision History
 * -----------------------------------------------------------------------------
 * 1.0: May 5th, 2014
 *      - Initial Release
 * 
 *
 * =============================================================================
 *
 * To set this up on your JUNOS device copy this script to the following folder:
 * /var/db/scripts/event
 *
 * Then configure JUNOS with the following:
 * 'set event-options event-script file pw-overload.slax'
 *
 * Make sure you name the script 'pw-overload' or change references in
 * the script and JUNOS config to be whatever you named it.
 *
 */



/*
 * Embeded policy to make this an event script 
 * triggered on a BFD UP/DOWN event. Event attributes 
 * are extracted from the event and passed to this script
 * as arguments such as interface on which BFD session 
 * went down and the new-state.
 */
var $event-definition = {
  <event-options> {

    <policy> {
      <name> "bfd_down";
      <events> "bfdd_trap_shop_state_down";
      <events> "bfdd_trap_shop_state_up";

      <then> {
        <event-script> {
          <name> "pw-overload.slax";
	  <arguments> {
		<name> "new-state";
	        <value> "{$$.state}";
          }
          <arguments> {
		<name> "interface";
	        <value> "{$$.pip-interface}";
          }
          <arguments> {
		<name> "peer";
	        <value> "{$$.remote-peer}";
	  }
        }
      }
    }
  }
}

param $new-state;
param $interface;
param $peer;

match / {

  <event-script-results> {

    var $ifd-substr = jcs:split('[.]', $interface);
    var $ifd = $ifd-substr[1];
    var $syslog_message_ifd = "BFD IFD == " _ $ifd _ " " _ $interface;
    expr jcs:syslog("user.info", $syslog_message_ifd);


    var $ospf-nbr-rpc = <get-ospf-neighbor-information>;
    var $results = jcs:invoke($ospf-nbr-rpc);

    for-each ($results/ospf-neighbor) {
        var $ospf-interface = ./interface-name;
	var $ospf-interface-substr = jcs:split('[.]', $ospf-interface);
	var $ospf-ifd = $ospf-interface-substr[1];
        var $syslog_message_intf = "OSPF INTF = " _ $ospf-interface _ "OSPF IFD " _ $ospf-ifd _ "IFD " _ $ifd;
        expr jcs:syslog("user.info", $syslog_message_intf);
	if ($ospf-ifd == $ifd) {

	   /* get the nbr address and the router-id of the remote peer */
           var $remote-router = ./neighbor-id;
	   var $ospf-nbr = ./neighbor-address;

	   /* get the existing metric value for this interface */
           var $ospf-intf-rpc = <get-ospf-interface-information> {
					<detail>;
		                }
	   var $ospf-intf-results = jcs:invoke($ospf-intf-rpc);
           for-each ($ospf-intf-results/ospf-interface[starts-with(interface-name, $ospf-interface)]) {
              var $old-metric = ./interface-cost;
              var $syslog_message_metric = "OSPF METRIC = " _ $old-metric;
              expr jcs:syslog("user.info", $syslog_message_metric);

              if ($new-state == "down") {
                  var $new-down-metric = $old-metric + 30000;
                  call change_metric($metric = $new-down-metric, $ospf-interface);
	          call change_remote_metric($remote-router, $ospf-nbr, $state = "down");
              } else {
                  var $new-up-metric = $old-metric - 30000;
	          call change_metric($metric = $new-up-metric, $ospf-interface);
                  call change_remote_metric($remote-router, $ospf-nbr, $state = "up");
              }
           }
        }
      }
      var $ospf-nbr-message = "OSPF SAVED NBR = " _ $ospf-nbr;
      expr jcs:syslog("user.info", $ospf-nbr-message);
   }
}

/*
 * This will modify the existing ospf metric values 
 */
template change_metric($metric, $ospf-interface) {

   /* Retrieve the current configuration */
    var $configuration = jcs:invoke( "get-configuration" );

    var $change = {
        <configuration> {
            <protocols> {
                <ospf> {
                    <area> {
                        <name> "0.0.0.0";
                        <interface> {
                            <name> $ospf-interface;
                            <metric> $metric;
                         }
                     }
                  }
              }
          }
      }

      /* Load and commit the configuration change */
      var $syslog_message_conf = "CHANGE = " _ $change;
      expr jcs:syslog("user.info", $syslog_message_conf);
      var $connection = jcs:open();
      var $config_results := {
             call jcs:load-configuration( $connection, $configuration = $change );
      }
      var $close-results = jcs:close( $connection );
}



/*
 * logs into the remote CE router and invokes an op script.
 */
template change_remote_metric($remote-router, $ospf-nbr, $state) {

	    /* 
	     * Connect to the remote peer and excute the op script to adjust ospf
	     * metric on the remote peer
	     */
             var $syslog_message_op = "OSPF PEER = " _ $remote-router _ " NBR " _ $ospf-nbr;
             expr jcs:syslog("user.info", $syslog_message_op);

	     var $remote-user = "jnpr";
             var $password = "pass123";

             var $remote-connection  = jcs:open($remote-router, $remote-user, $password);
             
             if( $remote-connection//xnm:error ) {
                expr jcs:syslog( "user.error", "REMOTE CONN FAILED.");
             }

             var $op-rpc = {
                <op-script> {
                   <script> "pw-overload-remote";
                       <ospf-nbr> $ospf-nbr;
                       <state> $state;
                }  
             }
             var $remote-result = jcs:execute($remote-connection, $op-rpc);

             if( $remote-result//xnm:error ) {
                expr jcs:syslog( "user.error", "REMOTE RPC FAILED.");
             }

             expr jcs:close($remote-connection);
}