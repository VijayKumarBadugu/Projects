/*
$Id$
*/

version 1.0;
ns Junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

/*
 * Author        : Nadeem Mohammad
 * Version       : 1.0
 * Last Modified : June 25th, 2014
 * Platform      : PTX/MX
 * Release       : 10.0 and above
 *
 * Description   : This is an op script to be exectued on the TL (PE)
 *                 routers. This script is part of the PWE Overload
 *                 functionality as described in PWE-OVERLOAD-README.txt
 *                 This script takes an argument named "state" with the
 *                 value of "on" indicating pwe overload is initiated and
 *                 "off" indicating pwe overload is turned off. 
 *                 Once initiated, this script looks at all the .100 ifls
 *                 in the system (CITM) ifls (please refer to the PWE-
 *                 OVERLOAD-README.txt file) and brings them down. 
 *                 Once turned off, this script will once again scan and
 *                 find all the .100 ifls and bring them up. overall this
 *                 will cause the BFD sessions running on the CITM ifls
 *                 to go down and up on the P-Core routers (CEs).
 *
 *                 Note: Its operators responsibility to configure these
 *                 CITM .100 ifls correctly as these should be exclusively
 *                 dedicated to the BFD sessions that need to be toggled.
 *                 
 *
 * =============================================================================
 * Revision History
 * -----------------------------------------------------------------------------
 * 1.0: June 25th, 2014
 *      - Initial Release
 * 
 *
 * =============================================================================
 *
 * To set this up on your JUNOS device copy this script to the following folder:
 * /var/db/scripts/op
 *
 *
 * Make sure you name the script 'PWE-OVERLOAD-TL' or change references in
 * the script and JUNOS config to be whatever you named it.
 *
 */


var $arguments = {
        <argument> {
                <name> "state";
                <description> "on or off";
        }
}

param $state = "off";

match / {

    <op-script-results> {

    /* invoke show interface terse and look for logical interfaces with vlan-id 100 */
    var $intf-terse-rpc = <get-interface-information> {
			     <terse>;
                          }
    var $results = jcs:invoke($intf-terse-rpc);

    for-each ($results/physical-interface) {
        for-each (./logical-interface) {
	    var $intf-name  = name;
            var $intf-name-substr = jcs:split('[.]', $intf-name);
            var $intf-ifd = $intf-name-substr[1];
            var $vlan-id = $intf-name-substr[2];

            if ($vlan-id == "100") {
                var $admin-state = ./admin-status;
	        /* change the interface state */
                call change_intf_state($state, $admin-state, $intf-name, $intf-ifd, $vlan-id);

            }
         }
      }
   }
}


template change_intf_state($state, $admin-state, $intf-name, $intf-ifd, $vlan-id) {

   if ($state == "on") {
      if ($admin-state == "up") {
        /* bring down the interface */
         var $down-change = {
            <configuration> {
	        <interfaces> {
                     <interface> {
                        <name> $intf-ifd;
                        <unit> {
                           <name> $vlan-id;
                           <disable>;
                        }
                     }
                 }
             }
         }
         /* Load and commit the configuration change */
         call change_config($change = $down-change);
      }
    } else {
       if ($admin-state == "down") {
         /* bring up the interface */
         var $up-change = {
            <configuration> {
	        <interfaces> {
                    <interface> {
                        <name> $intf-ifd;
                        <unit> {
                           <name> $vlan-id;
                           <disable delete="delete">;
                        }                        
                    }
                 }
             }
          }
          /* Load and commit the configuration change */
          call change_config($change = $up-change);
       }
    }
}

template change_config($change) {

     /*Retrieve the current configuration*/
     var $configuration = jcs:invoke( "get-configuration" );

     var $connection = jcs:open();
     var $config-results := {
        call jcs:load-configuration( $connection, $configuration = $change );
     }

     if( $config-results//xnm:error ) {
          expr jcs:syslog( "user.error", "LOAD Config Failed.");
     }

     var $close-results = jcs:close( $connection );
}