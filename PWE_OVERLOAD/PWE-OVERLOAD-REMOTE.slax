/*
$Id$
*/

version 1.0;
ns Junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

/*
 * Author        : Nadeem Mohammad
 * Version       : 1.0
 * Last Modified : May 25th, 2014
 * Platform      : PTX/MX
 * Release       : 10.0 and above
 *
 * Description   : This is an op script invoked via remote log-in connection.
 *                 This script takes ospf nbr address and state as an argument.
 *                 Script is invoked on a BFD down and BFD up events on the
 *                 remote router (CE1). state tells which event. on an down
 *                 event this script locates the local ifl corrisponding to
 *                 the ospf nbr address and raises the metric value. on an
 *                 UP event it restores the metric value to its orginal value.
 *                 script does this by extracting the existing values and 
 *                 either add or subtract 30k to it or from it. 
 *                 
 *
 * =============================================================================
 * Revision History
 * -----------------------------------------------------------------------------
 * 1.0: May 5th, 2014
 *      - Initial Release
 * 
 *
 * =============================================================================
 *
 * To set this up on your JUNOS device copy this script to the following folder:
 * /var/db/scripts/op
 *
 *
 * Make sure you name the script 'PWE-OVERLOAD-REMOTE' or change references in
 * the script and JUNOS config to be whatever you named it.
 *
 */


param $ospf-nbr;
param $state;

match / {

    <op-script-results> {

    /* invoke show ospf neighbor */
    var $intf-terse-rpc = <get-interface-information> {
			     <terse>;
                          }
    var $results = jcs:invoke($intf-terse-rpc);

    for-each ($results/physical-interface) {
        for-each (./logical-interface/address-family[starts-with(address-family-name, "inet")]) {
	    var $ospf-nbr-addr = ./interface-address/ifa-local;
            var $ospf-nbr-addr-substr = jcs:split('[/]', $ospf-nbr-addr);
            var $local-ospf-nbr = $ospf-nbr-addr-substr[1];

            if ($local-ospf-nbr == $ospf-nbr) {
                var $ospf-interface = ../name;
               
                var $old-metric := { call get_ospf_metric($ospf-interface); };

                if ($state == "down") {
                   var $new-down-metric = $old-metric + 30000;
                   var $syslog_message_down_metric = " changing OSPF metric to " _ $new-down-metric _ " on OSPF interface " _ $ospf-interface;
                   expr jcs:syslog("user.info", $syslog_message_down_metric);
                   call change_metric($metric = $new-down-metric, $ospf-interface);
                } else {
                   var $new-up-metric = $old-metric - 30000;
                   var $syslog_message_up_metric = " changing OSPF metric to " _ $new-up-metric _ " on OSPF interface " _ $ospf-interface;
                   expr jcs:syslog("user.info", $syslog_message_up_metric);
                   call change_metric($metric = $new-up-metric, $ospf-interface);
                }
            }
         }
      }
   }
}


template change_metric($metric, $ospf-interface) {

   /* Retrieve the current configuration */
    var $configuration = jcs:invoke( "get-configuration" );

    var $change = {
        <configuration> {
	    <protocols> {
                <ospf> {
                    <area> {
                        <name> "0.0.0.0";
	                <interface> {
	                    <name> $ospf-interface;
                            <metric> $metric;
                         }
                     }
                  }
              }
          }
      }

      /* Load and commit the configuration change */
      var $connection = jcs:open();
      var $config_results := {
             call jcs:load-configuration( $connection, $configuration = $change );
      }
      var $close-results = jcs:close( $connection );
}


template get_ospf_metric($ospf-interface) {

      /* get the existing metric value for this interface */
      var $ospf-intf-rpc = <get-ospf-interface-information> {
                                  <detail>;
                           }

      var $ospf-intf-results = jcs:invoke($ospf-intf-rpc);
      for-each ($ospf-intf-results/ospf-interface[starts-with(interface-name, $ospf-interface)]) {
          var $metric = ./interface-cost;
          copy-of $metric;
      }
}
